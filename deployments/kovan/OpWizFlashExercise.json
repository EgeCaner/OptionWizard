{
  "address": "0x18797f6BE63171f7e51B025c209A4A59B8eeFE5A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "Exercise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "setted",
          "type": "bool"
        }
      ],
      "name": "Offer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "Participate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawColleteral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPremium",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "buyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "delistOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "exerciseOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "flashPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashExercise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "listOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "colleteral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "premiumAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfColleteral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfCA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerEnd",
          "type": "uint256"
        }
      ],
      "name": "offerOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "listAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offerEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exercised",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "options",
      "outputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "colleteral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "premiumAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfColleteral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfCA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "participateOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "refundColleteral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "withdrawPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0906ba194719cdb4f249dfc1651ff580e788a26e6f38261319f00289eaa37f94",
  "receipt": {
    "to": null,
    "from": "0xa1Aa152c7d13A577F2e38e5611b91fA7Af1704e2",
    "contractAddress": "0x18797f6BE63171f7e51B025c209A4A59B8eeFE5A",
    "transactionIndex": 3,
    "gasUsed": "3352820",
    "logsBloom": "0x
    "blockHash": "0x2bfeef2098c835e84e8062f4bca94814c23094c9596b949ffc4b426d554d8619",
    "transactionHash": "0x0906ba194719cdb4f249dfc1651ff580e788a26e6f38261319f00289eaa37f94",
    "logs": [],
    "blockNumber": 31740399,
    "cumulativeGasUsed": "3582155",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b82065cc0451e7128b797d1e0ea9ddc7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setted\",\"type\":\"bool\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Participate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawColleteral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPremium\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"buyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"delistOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"listOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"colleteral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerEnd\",\"type\":\"uint256\"}],\"name\":\"offerOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exercised\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"colleteral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"participateOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"refundColleteral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"withdrawCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"withdrawPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyOption(uint256)\":{\"details\":\"change participator address to msg.sender and delist the option from secondary market\",\"params\":{\"optionId\":\"ID of the option\"}},\"delistOption(uint256)\":{\"details\":\"sets listed field of option to false in option mapping, only callable by the participator\",\"params\":{\"optionId\":\"ID of the option\"}},\"executeOperation(address,uint256,uint256,address,bytes)\":{\"details\":\"Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount\",\"params\":{\"amount\":\"The amount of the flash-borrowed asset\",\"asset\":\"The address of the flash-borrowed asset\",\"initiator\":\"The address of the flashloan initiator\",\"params\":\"The byte-encoded params passed when initiating the flashloan\",\"premium\":\"The fee of the flash-borrowed asset\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds, false otherwise\"}},\"exerciseOption(uint256)\":{\"details\":\"transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\",\"params\":{\"optionId\":\"ID of the option\"}},\"listOption(uint256,address,uint256)\":{\"details\":\"sets listed field of option to true, asset address and amount in option mapping\",\"params\":{\"optionId\":\"ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\"}},\"offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\",\"params\":{\"colleteral\":\"Address of colleteral asset, counterAsset Address of counter asset, \",\"premiumAsset\":\"Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\"}},\"participateOption(uint256)\":{\"details\":\"transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\",\"params\":{\"optionId\":\"ID of the option\"}},\"refundColleteral(uint256)\":{\"details\":\"refund the colleteral only if option is not participated or option expires worthless\",\"params\":{\"optionId\":\"ID of the option\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"withdraw(address,uint256)\":{\"details\":\"transfer the token that option seller should receive\",\"params\":{\"amount\":\"Amount of thw token received\",\"asset\":\"Address of the token to receive\"}},\"withdrawCA(uint256)\":{\"details\":\"transfer the counter asset to initiator only if option is exercised\",\"params\":{\"optionId\":\"ID of the option, receiver Address of buyer of the option  contract\"}},\"withdrawPremium(uint256)\":{\"details\":\"transfers the premium asset if there is a participant in option contract only callable by the option initiator\",\"params\":{\"optionId\":\"ID of the option\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyOption(uint256)\":{\"notice\":\"buy the option from secondary market\"},\"delistOption(uint256)\":{\"notice\":\"delists the option from secondary market\"},\"executeOperation(address,uint256,uint256,address,bytes)\":{\"notice\":\"Executes an operation after receiving the flash-borrowed asset\"},\"exerciseOption(uint256)\":{\"notice\":\"exercies the option\"},\"listOption(uint256,address,uint256)\":{\"notice\":\"list the option in secondary market\"},\"offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"publish an offer for the option contract\"},\"participateOption(uint256)\":{\"notice\":\"participate in option contract by paying the option premium\"},\"refundColleteral(uint256)\":{\"notice\":\"withdraw colleteral only if no ones participates in offer period or option expires worthless\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraw the amount that seller of the option should receive\"},\"withdrawCA(uint256)\":{\"notice\":\"transfers the counter asset to caller\"},\"withdrawPremium(uint256)\":{\"notice\":\"withdraw the option premium \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpWiz/OpWizFlashExercise.sol\":\"OpWizFlashExercise\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from \\\"../../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"../../interfaces/IPool.sol\\\";\\n\\n/**\\n * @title IFlashLoanSimpleReceiver\\n * @author Aave\\n * @notice Defines the basic interface of a flashloan-receiver contract.\\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanSimpleReceiver {\\n  /**\\n   * @notice Executes an operation after receiving the flash-borrowed asset\\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\\n   *      enough funds to repay and has approved the Pool to pull the total amount\\n   * @param asset The address of the flash-borrowed asset\\n   * @param amount The amount of the flash-borrowed asset\\n   * @param premium The fee of the flash-borrowed asset\\n   * @param initiator The address of the flashloan initiator\\n   * @param params The byte-encoded params passed when initiating the flashloan\\n   * @return True if the execution of the operation succeeds, false otherwise\\n   */\\n  function executeOperation(\\n    address asset,\\n    uint256 amount,\\n    uint256 premium,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  function POOL() external view returns (IPool);\\n}\\n\",\"keccak256\":\"0x9f5795f5e06215f0a0c14ef4c7951f5d321e6a06f11b8ee9944d4a8828b74db9\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The rate mode that the user wants to swap to: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x71a2d4598a4d7f7f34188e2114d7cc2208a372a2d9361c42c744f6d48e7a72cd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x73185cd3b952eb691bbf2344b3f7a35cf8b67b33c39275e52e12b80436ea1d5c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OpWiz/IOpWizFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOpWizSimple.sol\\\";\\nimport \\\"@aave/core-v3/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol\\\";\\n\\ninterface IOpWizFlashLoanSimpleReceiver is IOpWizSimple, IFlashLoanSimpleReceiver {\\n\\n    function flashExercise(\\n        uint optionId,\\n        address flashPool,\\n        uint amount,\\n        uint16 referralCode,\\n        bytes calldata params\\n    ) external;\\n}\",\"keccak256\":\"0x7d6eee91a4cee1e0a00b5095188cb3a485483bb3ec9dcefba4d9bdecb5ed9836\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/IOpWizSimple.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\n/**\\n* @title Interface of the OptionWizard contract\\n* @author Ege Caner\\n */\\ninterface IOpWizSimple {\\n\\n    struct Option { \\n        address initiator; \\n        address participant;\\n        address colleteral;\\n        address counterAsset;\\n        address premiumAsset;\\n        uint amountOfColleteral;\\n        uint amountOfCA;\\n        uint premiumAmount; \\n    }\\n\\n    struct OptionDetails {\\n        address listAsset;\\n        address priceFeedAddress;\\n        address poolAddress;\\n        uint offerEnd;\\n        uint optionExpiry;\\n        uint listAmount;\\n        bool isListed;\\n        bool exercised;\\n    }\\n\\n    event Offer(\\n       address indexed initiator,\\n       uint indexed optionId,\\n       bool setted\\n    );\\n    \\n    event Participate(\\n        address indexed participator,\\n        uint indexed optionId\\n    );\\n\\n    event Exercise(\\n        address indexed participator,\\n        uint indexed optionId\\n    );\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint indexed optionId\\n    );\\n\\n    event Listed(\\n        uint optionId,\\n        bool isListed\\n    );\\n\\n    event WithdrawCA(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event WithdrawPremium(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event WithdrawColleteral(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event Withdraw(\\n        address asset,\\n        address to,\\n        uint amount\\n    );\\n\\n    /**\\n    * @notice publish an offer for the option contract\\n    * @dev locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\\n    * @param colleteral Address of colleteral asset, counterAsset Address of counter asset, \\n    * @param premiumAsset Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\\n    */\\n    function offerOption(\\n        address colleteral,\\n        address counterAsset,\\n        address premiumAsset,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        external;\\n    \\n    /**\\n    * @notice participate in option contract by paying the option premium\\n    * @dev transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\\n    * @param optionId ID of the option\\n    */\\n    function participateOption(uint optionId)  external;\\n\\n    /**\\n    * @notice withdraw colleteral only if no ones participates in offer period or option expires worthless\\n    * @dev refund the colleteral only if option is not participated or option expires worthless\\n    * @param optionId ID of the option\\n    */\\n    function refundColleteral(uint optionId) external;\\n\\n    /**\\n    * @notice withdraw the option premium \\n    * @dev transfers the premium asset if there is a participant in option contract only callable by the option initiator\\n    * @param optionId ID of the option\\n    */\\n    function withdrawPremium(uint optionId) external;\\n\\n    /**\\n    * @notice exercies the option\\n    * @dev transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\\n    * @dev if asset type is not ERC20 handle this functionality with receive hooks using calldata\\n    * @param optionId ID of the option\\n    */\\n    function exerciseOption(uint optionId) external;\\n\\n    /**\\n    * @notice list the option in secondary market\\n    * @dev sets listed field of option to true, asset address and amount in option mapping\\n    * @param optionId ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\\n    */\\n    function listOption(\\n        uint optionId, \\n        address asset,\\n        uint amount\\n    ) \\n        external;\\n\\n    /**\\n    * @notice delists the option from secondary market\\n    * @dev sets listed field of option to false in option mapping, only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function delistOption(uint optionId) external;\\n\\n    /**\\n    * @notice transfers the counter asset to caller\\n    * @dev transfer the counter asset to initiator only if option is exercised\\n    * @param optionId ID of the option, receiver Address of buyer of the option  contract\\n    */\\n    function withdrawCA(uint optionId) external;\\n\\n    /**\\n    * @notice buy the option from secondary market\\n    * @dev change participator address to msg.sender and delist the option from secondary market\\n    * @dev If asset type is  not ERC20 revert and handle this functionality using receive hooks\\n    * @param optionId ID of the option\\n    */\\n    function buyOption(uint optionId) external;\\n\\n    /**\\n    * @notice withdraw the amount that seller of the option should receive\\n    * @dev transfer the token that option seller should receive\\n    * @param asset Address of the token to receive\\n    * @param amount Amount of thw token received\\n    */\\n    function withdraw(address asset, uint amount) external;\\n\\n}\",\"keccak256\":\"0x9f69113cffcde4ac9933d3ed012606c459c97b3f596e841ea7b62b46b26e39c5\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/OpWizFlashExercise.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOpWizFlashLoanSimpleReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./OpWizSimple.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\n\\ncontract OpWizFlashExercise is IERC165, OpWizSimple, IOpWizFlashLoanSimpleReceiver {\\n\\n    IPoolAddressesProvider public override ADDRESSES_PROVIDER;\\n    IPool public override POOL;\\n\\n    function flashExercise(\\n        uint optionId, \\n        address flashPool, \\n        uint amount,  \\n        uint16 referralCode,\\n        bytes calldata params\\n    ) \\n        external \\n        onlyParticipant(msg.sender, optionId)\\n        expired(optionId, false)\\n    {\\n       ADDRESSES_PROVIDER = IPoolAddressesProvider(flashPool);\\n       POOL = IPool(ADDRESSES_PROVIDER.getPool());\\n       POOL.flashLoanSimple(address(this), options[optionId].colleteral, options[optionId].amountOfColleteral, params, referralCode);\\n    }\\n\\n    /**\\n   * @notice Executes an operation after receiving the flash-borrowed asset\\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\\n   *      enough funds to repay and has approved the Pool to pull the total amount\\n   * @param asset The address of the flash-borrowed asset\\n   * @param amount The amount of the flash-borrowed asset\\n   * @param premium The fee of the flash-borrowed asset\\n   * @param initiator The address of the flashloan initiator\\n   * @param params The byte-encoded params passed when initiating the flashloan\\n   * @return True if the execution of the operation succeeds, false otherwise\\n   */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool){\\n        //implement the arbitrage here\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return interfaceId == this.supportsInterface.selector || \\n               interfaceId == this.executeOperation.selector;\\n    }\\n\\n}\",\"keccak256\":\"0x1d6d4bdea65a0e69901a4a08eceadc888762e27802f8942ea5570853efca9896\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/OpWizSimple.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./IOpWizSimple.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\n\\ncontract OpWizSimple is IOpWizSimple { \\n using Counters for Counters.Counter;\\n    \\n    Counters.Counter private counter;\\n\\n    mapping(uint => Option) public options;\\n    mapping(uint => OptionDetails) public optionDetails;\\n    mapping(address => mapping(address => uint)) public withdrawAllowance;\\n\\n    modifier rejectZeroAddress(address addr) {\\n        require(addr != address(0), \\\"Transaction to address(0)!\\\");\\n        _;\\n    }\\n\\n    modifier optionExists(uint optionId) {\\n        require(options[optionId].colleteral != address(0), \\\"Option does not exists.\\\");\\n        _;\\n    }\\n\\n    modifier onlyParticipant(address from, uint optionId) {\\n        require(from == options[optionId].participant, \\\"D3\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitiator(address from, uint optionId) {\\n        require(from == options[optionId].initiator,  \\\"D2\\\");\\n        _;\\n    }\\n\\n    modifier participated(uint optionId, bool check) {\\n        if (!check){\\n            require(options[optionId].participant == address(0), \\\"D13\\\");\\n        } else {\\n            require(options[optionId].participant != address(0), \\\"D12\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier offerPeriod(uint optionId, bool check) {\\n        require(optionDetails[optionId].offerEnd > 0, \\\"Option paramaters not setted yet\\\");\\n        if (check){\\n            require(optionDetails[optionId].offerEnd >= block.timestamp, \\\"Offer expired\\\");\\n        } else {\\n            require(optionDetails[optionId].offerEnd < block.timestamp, \\\"Offer not expired yet!\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier expired(uint optionId, bool check) {\\n        if (check){\\n            require(optionDetails[optionId].optionExpiry < block.timestamp, \\\"D8\\\");\\n        } else {\\n            require(optionDetails[optionId].optionExpiry >= block.timestamp, \\\"D9\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n    * @notice publish an offer for the option contract\\n    * @dev locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\\n    * @param colleteral Address of colleteral asset, counterAsset Address of counter asset, \\n    * @param premiumAsset Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\\n    */\\n    function offerOption(\\n        address colleteral,\\n        address counterAsset,\\n        address premiumAsset,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        external\\n        override \\n        rejectZeroAddress(colleteral)\\n        rejectZeroAddress(counterAsset)\\n        rejectZeroAddress(premiumAsset)\\n    {\\n        IERC20(colleteral).transferFrom(msg.sender, address(this), amountOfColleteral);\\n        counter.increment();\\n        uint index = counter.current();\\n        options[index].colleteral  = colleteral;\\n        Option storage option = options[index];\\n        option.counterAsset = counterAsset;\\n        option.premiumAsset = premiumAsset;\\n        option.amountOfColleteral = amountOfColleteral;\\n        option.premiumAmount = premiumAmount;\\n        option.amountOfCA = amountOfCA;\\n        option.initiator = msg.sender;\\n        emit Offer(msg.sender, index, true);\\n    }\\n    \\n    /**\\n    * @notice participate in option contract by paying the option premium\\n    * @dev transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\\n    * @param optionId ID of the option\\n    */\\n    function participateOption(uint optionId)  external override {\\n        _participateOption(msg.sender, optionId);\\n        IERC20(options[optionId].premiumAsset).transferFrom(\\n            msg.sender, \\n            address(this),\\n            options[optionId].premiumAmount\\n        );   \\n    }\\n\\n    /**\\n    * @notice withdraw colleteral only if no ones participates in offer period or option expires worthless\\n    * @dev refund the colleteral only if option is not participated or option expires worthless\\n    * @param optionId ID of the option\\n    */\\n    function refundColleteral(uint optionId) \\n        external\\n        override \\n        onlyInitiator(msg.sender, optionId) \\n        offerPeriod(optionId, false) \\n    {\\n        require((options[optionId].participant == address(0) || \\n        (optionDetails[optionId].optionExpiry < block.timestamp && \\n        !optionDetails[optionId].exercised)), \\\"D4\\\");\\n        _transferColleteral(msg.sender, optionId);   \\n    }\\n\\n    /**\\n    * @notice withdraw the option premium \\n    * @dev transfers the premium asset if there is a participant in option contract only callable by the option initiator\\n    * @param optionId ID of the option\\n    */\\n    function withdrawPremium(uint optionId) \\n        external \\n        override \\n        onlyInitiator(msg.sender, optionId) \\n        participated(optionId, true)\\n    {\\n        require(options[optionId].premiumAmount > 0 , \\\"D11\\\");\\n        uint amount = options[optionId].premiumAmount;\\n        options[optionId].premiumAmount = 0;\\n        IERC20(options[optionId].premiumAsset).transfer(msg.sender, amount);\\n        emit WithdrawPremium(msg.sender, optionId, amount);\\n    }\\n\\n    /**\\n    * @notice exercies the option\\n    * @dev transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function exerciseOption(uint optionId) external override onlyParticipant(msg.sender, optionId){\\n        _exerciseOption(optionId);\\n        IERC20(options[optionId].counterAsset).transferFrom(\\n            msg.sender, \\n            address(this), \\n            options[optionId].amountOfCA\\n        );\\n    }\\n\\n    /**\\n    * @notice list the option in secondary market\\n    * @dev sets listed field of option to true, asset address and amount in option mapping\\n    * @param optionId ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\\n    */\\n    function listOption(\\n        uint optionId, \\n        address asset,\\n        uint amount\\n    ) \\n        external \\n        override \\n        onlyParticipant(msg.sender, optionId)\\n        expired(optionId, false)\\n        rejectZeroAddress(asset)\\n    {\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].isListed = true;\\n        optionDetails[optionId].listAsset = asset;\\n        optionDetails[optionId].listAmount = amount;\\n        emit Listed(optionId, true);\\n    }\\n\\n    /**\\n    * @notice delists the option from secondary market\\n    * @dev sets listed field of option to false in option mapping, only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function delistOption(uint optionId) external override {\\n        _delistOption(msg.sender, optionId);\\n    }\\n\\n    /**\\n    * @notice transfers the counter asset to caller\\n    * @dev transfer the counter asset to initiator only if option is exercised\\n    * @param optionId ID of the option, receiver Address of buyer of the option  contract\\n    */\\n    function withdrawCA(uint optionId) external override onlyInitiator(msg.sender, optionId) {\\n        require(optionDetails[optionId].exercised, \\\"D10\\\");\\n        require(options[optionId].amountOfCA > 0, \\\"D11\\\");\\n        uint amount = options[optionId].amountOfCA;\\n        options[optionId].amountOfCA = 0;\\n        IERC20(options[optionId].counterAsset).transfer(msg.sender, amount);\\n        emit WithdrawCA(msg.sender, optionId, amount);\\n    }\\n\\n    /**\\n    * @notice buy the option from secondary market\\n    * @dev change participator address to msg.sender and delist the option from secondary market\\n    * @param optionId ID of the option\\n    */\\n    function buyOption(uint optionId) external override {\\n         _buyOption(msg.sender ,optionId);\\n        IERC20(optionDetails[optionId].listAsset).transferFrom(\\n            msg.sender, \\n            address(this), \\n            optionDetails[optionId].listAmount\\n        );\\n    }\\n\\n    /**\\n    * @notice withdraw the amount that seller of the option should receive\\n    * @dev transfer the token that option seller should receive\\n    * @param asset Address of the token to receive\\n    * @param amount Amount of thw token received\\n    */\\n    function withdraw(address asset, uint amount) external override {\\n        require(withdrawAllowance[asset][msg.sender] >= amount, \\\"D15\\\");\\n        withdrawAllowance[asset][msg.sender] -= amount;\\n        IERC20(asset).transfer(msg.sender, amount);\\n        emit Withdraw(asset, msg.sender, amount);\\n    } \\n\\n    function _participateOption(address participator,uint optionId) \\n        internal      \\n        optionExists(optionId) \\n        participated(optionId, false) \\n        offerPeriod(optionId, true)  \\n    {\\n        options[optionId].participant = participator;\\n        optionDetails[optionId].offerEnd = block.timestamp;\\n        emit Participate(participator, optionId);\\n    } \\n\\n    function _transferColleteral(address to, uint optionId) internal {\\n        uint amount = options[optionId].amountOfColleteral;\\n        options[optionId].amountOfColleteral = 0;\\n        IERC20(options[optionId].colleteral).transfer(to, amount);\\n        emit WithdrawColleteral(to, optionId, amount);\\n    }\\n\\n     function _exerciseOption(uint optionId) \\n        internal \\n        expired(optionId, false)\\n    {\\n        address to = options[optionId].participant;\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].exercised = true;\\n        _transferColleteral(to ,optionId);\\n        emit Exercise(to, optionId);\\n    }\\n\\n    function _buyOption(address to, uint optionId) \\n        internal \\n        optionExists(optionId) \\n        expired(optionId, false)\\n    {\\n        require(optionDetails[optionId].isListed, \\\"D14\\\");\\n        withdrawAllowance[optionDetails[optionId].listAsset][options[optionId].participant] += optionDetails[optionId].listAmount;\\n        emit Transfer(options[optionId].participant, to, optionId);\\n        options[optionId].participant = to;\\n        _delistOption(to ,optionId);\\n    }\\n\\n    function _delistOption(address participant, uint optionId) \\n        internal\\n        onlyParticipant(participant, optionId) \\n    {\\n        require(optionDetails[optionId].isListed, \\\"D7\\\");\\n        optionDetails[optionId].isListed = false;\\n        emit Listed(optionId, false);\\n    }    \\n}\",\"keccak256\":\"0x2f9d521b1be319ad72bb456b56f9846a5df36a785f9aff59ff3cbf69de02ead7\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613c10806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806357620cdf116100a2578063b91916a611610071578063b91916a6146102fd578063f3fef3a314610319578063f52f252614610335578063f81cba0514610351578063fba225b91461036d57610116565b806357620cdf1461028b57806360514205146102a75780637535d246146102c35780637f8368da146102e157610116565b80631b11d0ff116100e95780631b11d0ff146101bc5780631f01664a146101ec578063233ac0081461020857806329a2755c14610238578063409e22051461025457610116565b806301ffc9a71461011b5780630542975c1461014b578063065170f41461016957806319067b64146101a0575b600080fd5b61013560048036038101906101309190612b55565b610389565b6040516101429190612b9d565b60405180910390f35b610153610429565b6040516101609190612c37565b60405180910390f35b610183600480360381019061017e9190612c88565b61044f565b604051610197989796959493929190612ce5565b60405180910390f35b6101ba60048036038101906101b59190612e2e565b610511565b005b6101d660048036038101906101d19190612ec8565b610878565b6040516101e39190612b9d565b60405180910390f35b61020660048036038101906102019190612c88565b610888565b005b610222600480360381019061021d9190612f62565b610c0f565b60405161022f9190612fa2565b60405180910390f35b610252600480360381019061024d9190612c88565b610c34565b005b61026e60048036038101906102699190612c88565b610c41565b604051610282989796959493929190612fbd565b60405180910390f35b6102a560048036038101906102a09190612c88565b610d29565b005b6102c160048036038101906102bc9190612c88565b610e03565b005b6102cb611092565b6040516102d8919061305c565b60405180910390f35b6102fb60048036038101906102f69190613077565b6110b8565b005b6103176004803603810190610312919061312d565b611453565b005b610333600480360381019061032e9190613180565b611771565b005b61034f600480360381019061034a9190612c88565b611981565b005b61036b60048036038101906103669190612c88565b611b02565b005b61038760048036038101906103829190612c88565b611dc3565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104225750631b11d0ff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16905088565b33866001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae9061321d565b60405180910390fd5b876000801561061d5742600260008481526020019081526020016000206004015410610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90613289565b60405180910390fd5b610677565b4260026000848152602001908152602001600020600401541015610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066d906132f5565b60405180910390fd5b5b88600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610749919061332a565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342b0b77c30600160008e815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008f8152602001908152602001600020600501548a8a8d6040518763ffffffff1660e01b815260040161083a969594939291906133c4565b600060405180830381600087803b15801561085457600080fd5b505af1158015610868573d6000803e3d6000fd5b5050505050505050505050505050565b6000600190509695505050505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461092e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109259061346c565b60405180910390fd5b826001806109e057600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d2906134d8565b60405180910390fd5b610a87565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d90613544565b60405180910390fd5b5b6000600160008781526020019081526020016000206007015411610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad7906135b0565b60405180910390fd5b600060016000878152602001908152602001600020600701549050600060016000888152602001908152602001600020600701819055506001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b889291906135d0565b6020604051808303816000875af1158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190613625565b507f364c50cfd85ef2e44ae41c769b375ca3e4cd21a63f2f593171bdda820f70d1f7338783604051610bff93929190613652565b60405180910390a1505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610c3e3382611e9d565b50565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154908060070154905088565b610d333382612015565b6001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610dbc93929190613689565b6020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff9190613625565b5050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea09061346c565b60405180910390fd5b6002600084815260200190815260200160002060060160019054906101000a900460ff16610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f039061370c565b60405180910390fd5b6000600160008581526020019081526020016000206006015411610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c906135b0565b60405180910390fd5b600060016000858152602001908152602001600020600601549050600060016000868152602001908152602001600020600601819055506001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161100d9291906135d0565b6020604051808303816000875af115801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190613625565b507fd4072f896a83f1975997e4b3c8cc6e44538eafada8b6537b11e77ff1ead2455f33858360405161108493929190613652565b60405180910390a150505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112090613778565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561119a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119190613778565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561120b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120290613778565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161124893929190613689565b6020604051808303816000875af1158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190613625565b5061129660006123eb565b60006112a26000612401565b90508b6001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001600083815260200190815260200160002090508b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898160050181905550878160070181905550888160060181905550338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550813373ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e39159600160405161143c9190612b9d565b60405180910390a350505050505050505050505050565b33836001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f09061321d565b60405180910390fd5b846000801561155f574260026000848152602001908152602001600020600401541061155a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155190613289565b60405180910390fd5b6115b9565b42600260008481526020019081526020016000206004015410156115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af906132f5565b60405180910390fd5b5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561162a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162190613778565b60405180910390fd5b6002600089815260200190815260200160002060060160019054906101000a900460ff161561168e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611685906137e4565b60405180910390fd5b6001600260008a815260200190815260200160002060060160006101000a81548160ff02191690831515021790555086600260008a815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008a8152602001908152602001600020600501819055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c88600160405161175f929190613804565b60405180910390a15050505050505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182790613879565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118bc91906138c8565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016118fe9291906135d0565b6020604051808303816000875af115801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190613625565b507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb82338360405161197593929190613689565b60405180910390a15050565b33816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1e9061321d565b60405180910390fd5b611a308361240f565b6001600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000888152602001908152602001600020600601546040518463ffffffff1660e01b8152600401611ab993929190613689565b6020604051808303816000875af1158015611ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afc9190613625565b50505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9f9061346c565b60405180910390fd5b82600080600260008481526020019081526020016000206003015411611c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfa90613948565b60405180910390fd5b8015611c67574260026000848152602001908152602001600020600301541015611c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c59906139b4565b60405180910390fd5b611cc0565b42600260008481526020019081526020016000206003015410611cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb690613a20565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611d735750426002600087815260200190815260200160002060040154108015611d7257506002600086815260200190815260200160002060060160019054906101000a900460ff16155b5b611db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da990613a8c565b60405180910390fd5b611dbc33866125f1565b5050505050565b611dcd338261271d565b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060026000868152602001908152602001600020600501546040518463ffffffff1660e01b8152600401611e5693929190613689565b6020604051808303816000875af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e999190613625565b5050565b81816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a9061321d565b60405180910390fd5b6002600084815260200190815260200160002060060160009054906101000a900460ff16611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d906137e4565b60405180910390fd5b60006002600085815260200190815260200160002060060160006101000a81548160ff0219169083151502179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c836000604051612007929190613804565b60405180910390a150505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b390613af8565b60405180910390fd5b8160008061216e57600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612169576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612160906134d8565b60405180910390fd5b612215565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220b90613544565b60405180910390fd5b5b8360016000600260008481526020019081526020016000206003015411612271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226890613948565b60405180910390fd5b80156122d55742600260008481526020019081526020016000206003015410156122d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c7906139b4565b60405180910390fd5b61232e565b4260026000848152602001908152602001600020600301541061232d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232490613a20565b60405180910390fd5b5b866001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002600088815260200190815260200160002060030181905550858773ffffffffffffffffffffffffffffffffffffffff167feb353a6084f42c4569f7fe0e62ec9a9a107f0453a8f76735dd47ef68dcfcce3f60405160405180910390a350505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b80600080156124755742600260008481526020019081526020016000206004015410612470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246790613289565b60405180910390fd5b6124cf565b42600260008481526020019081526020016000206004015410156124ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c5906132f5565b60405180910390fd5b5b60006001600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506002600085815260200190815260200160002060060160019054906101000a900460ff161561256e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612565906137e4565b60405180910390fd5b60016002600086815260200190815260200160002060060160016101000a81548160ff0219169083151502179055506125a781856125f1565b838173ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a350505050565b600060016000838152602001908152602001600020600501549050600060016000848152602001908152602001600020600501819055506001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016126999291906135d0565b6020604051808303816000875af11580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc9190613625565b507f6349409af923ab04f6ba4cd71740fcf0de9efb3a66822fd753b51741914227cc83838360405161271093929190613652565b60405180910390a1505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bb90613af8565b60405180910390fd5b816000801561282a5742600260008481526020019081526020016000206004015410612825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281c90613289565b60405180910390fd5b612884565b4260026000848152602001908152602001600020600401541015612883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287a906132f5565b60405180910390fd5b5b6002600085815260200190815260200160002060060160009054906101000a900460ff166128e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128de90613b64565b60405180910390fd5b6002600085815260200190815260200160002060050154600360006002600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129f59190613b84565b92505081905550838573ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4846001600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612aec8585611e9d565b5050505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612b3281612afd565b8114612b3d57600080fd5b50565b600081359050612b4f81612b29565b92915050565b600060208284031215612b6b57612b6a612af3565b5b6000612b7984828501612b40565b91505092915050565b60008115159050919050565b612b9781612b82565b82525050565b6000602082019050612bb26000830184612b8e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612bfd612bf8612bf384612bb8565b612bd8565b612bb8565b9050919050565b6000612c0f82612be2565b9050919050565b6000612c2182612c04565b9050919050565b612c3181612c16565b82525050565b6000602082019050612c4c6000830184612c28565b92915050565b6000819050919050565b612c6581612c52565b8114612c7057600080fd5b50565b600081359050612c8281612c5c565b92915050565b600060208284031215612c9e57612c9d612af3565b5b6000612cac84828501612c73565b91505092915050565b6000612cc082612bb8565b9050919050565b612cd081612cb5565b82525050565b612cdf81612c52565b82525050565b600061010082019050612cfb600083018b612cc7565b612d08602083018a612cc7565b612d156040830189612cc7565b612d226060830188612cd6565b612d2f6080830187612cd6565b612d3c60a0830186612cd6565b612d4960c0830185612b8e565b612d5660e0830184612b8e565b9998505050505050505050565b612d6c81612cb5565b8114612d7757600080fd5b50565b600081359050612d8981612d63565b92915050565b600061ffff82169050919050565b612da681612d8f565b8114612db157600080fd5b50565b600081359050612dc381612d9d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612dee57612ded612dc9565b5b8235905067ffffffffffffffff811115612e0b57612e0a612dce565b5b602083019150836001820283011115612e2757612e26612dd3565b5b9250929050565b60008060008060008060a08789031215612e4b57612e4a612af3565b5b6000612e5989828a01612c73565b9650506020612e6a89828a01612d7a565b9550506040612e7b89828a01612c73565b9450506060612e8c89828a01612db4565b935050608087013567ffffffffffffffff811115612ead57612eac612af8565b5b612eb989828a01612dd8565b92509250509295509295509295565b60008060008060008060a08789031215612ee557612ee4612af3565b5b6000612ef389828a01612d7a565b9650506020612f0489828a01612c73565b9550506040612f1589828a01612c73565b9450506060612f2689828a01612d7a565b935050608087013567ffffffffffffffff811115612f4757612f46612af8565b5b612f5389828a01612dd8565b92509250509295509295509295565b60008060408385031215612f7957612f78612af3565b5b6000612f8785828601612d7a565b9250506020612f9885828601612d7a565b9150509250929050565b6000602082019050612fb76000830184612cd6565b92915050565b600061010082019050612fd3600083018b612cc7565b612fe0602083018a612cc7565b612fed6040830189612cc7565b612ffa6060830188612cc7565b6130076080830187612cc7565b61301460a0830186612cd6565b61302160c0830185612cd6565b61302e60e0830184612cd6565b9998505050505050505050565b600061304682612c04565b9050919050565b6130568161303b565b82525050565b6000602082019050613071600083018461304d565b92915050565b600080600080600080600080610100898b03121561309857613097612af3565b5b60006130a68b828c01612d7a565b98505060206130b78b828c01612d7a565b97505060406130c88b828c01612d7a565b96505060606130d98b828c01612c73565b95505060806130ea8b828c01612c73565b94505060a06130fb8b828c01612c73565b93505060c061310c8b828c01612c73565b92505060e061311d8b828c01612c73565b9150509295985092959890939650565b60008060006060848603121561314657613145612af3565b5b600061315486828701612c73565b935050602061316586828701612d7a565b925050604061317686828701612c73565b9150509250925092565b6000806040838503121561319757613196612af3565b5b60006131a585828601612d7a565b92505060206131b685828601612c73565b9150509250929050565b600082825260208201905092915050565b7f4433000000000000000000000000000000000000000000000000000000000000600082015250565b60006132076002836131c0565b9150613212826131d1565b602082019050919050565b60006020820190508181036000830152613236816131fa565b9050919050565b7f4438000000000000000000000000000000000000000000000000000000000000600082015250565b60006132736002836131c0565b915061327e8261323d565b602082019050919050565b600060208201905081810360008301526132a281613266565b9050919050565b7f4439000000000000000000000000000000000000000000000000000000000000600082015250565b60006132df6002836131c0565b91506132ea826132a9565b602082019050919050565b6000602082019050818103600083015261330e816132d2565b9050919050565b60008151905061332481612d63565b92915050565b6000602082840312156133405761333f612af3565b5b600061334e84828501613315565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006133948385613357565b93506133a1838584613368565b6133aa83613377565b840190509392505050565b6133be81612d8f565b82525050565b600060a0820190506133d96000830189612cc7565b6133e66020830188612cc7565b6133f36040830187612cd6565b8181036060830152613406818587613388565b905061341560808301846133b5565b979650505050505050565b7f4432000000000000000000000000000000000000000000000000000000000000600082015250565b60006134566002836131c0565b915061346182613420565b602082019050919050565b6000602082019050818103600083015261348581613449565b9050919050565b7f4431330000000000000000000000000000000000000000000000000000000000600082015250565b60006134c26003836131c0565b91506134cd8261348c565b602082019050919050565b600060208201905081810360008301526134f1816134b5565b9050919050565b7f4431320000000000000000000000000000000000000000000000000000000000600082015250565b600061352e6003836131c0565b9150613539826134f8565b602082019050919050565b6000602082019050818103600083015261355d81613521565b9050919050565b7f4431310000000000000000000000000000000000000000000000000000000000600082015250565b600061359a6003836131c0565b91506135a582613564565b602082019050919050565b600060208201905081810360008301526135c98161358d565b9050919050565b60006040820190506135e56000830185612cc7565b6135f26020830184612cd6565b9392505050565b61360281612b82565b811461360d57600080fd5b50565b60008151905061361f816135f9565b92915050565b60006020828403121561363b5761363a612af3565b5b600061364984828501613610565b91505092915050565b60006060820190506136676000830186612cc7565b6136746020830185612cd6565b6136816040830184612cd6565b949350505050565b600060608201905061369e6000830186612cc7565b6136ab6020830185612cc7565b6136b86040830184612cd6565b949350505050565b7f4431300000000000000000000000000000000000000000000000000000000000600082015250565b60006136f66003836131c0565b9150613701826136c0565b602082019050919050565b60006020820190508181036000830152613725816136e9565b9050919050565b7f5472616e73616374696f6e20746f206164647265737328302921000000000000600082015250565b6000613762601a836131c0565b915061376d8261372c565b602082019050919050565b6000602082019050818103600083015261379181613755565b9050919050565b7f4437000000000000000000000000000000000000000000000000000000000000600082015250565b60006137ce6002836131c0565b91506137d982613798565b602082019050919050565b600060208201905081810360008301526137fd816137c1565b9050919050565b60006040820190506138196000830185612cd6565b6138266020830184612b8e565b9392505050565b7f4431350000000000000000000000000000000000000000000000000000000000600082015250565b60006138636003836131c0565b915061386e8261382d565b602082019050919050565b6000602082019050818103600083015261389281613856565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138d382612c52565b91506138de83612c52565b9250828210156138f1576138f0613899565b5b828203905092915050565b7f4f7074696f6e20706172616d6174657273206e6f742073657474656420796574600082015250565b60006139326020836131c0565b915061393d826138fc565b602082019050919050565b6000602082019050818103600083015261396181613925565b9050919050565b7f4f66666572206578706972656400000000000000000000000000000000000000600082015250565b600061399e600d836131c0565b91506139a982613968565b602082019050919050565b600060208201905081810360008301526139cd81613991565b9050919050565b7f4f66666572206e6f742065787069726564207965742100000000000000000000600082015250565b6000613a0a6016836131c0565b9150613a15826139d4565b602082019050919050565b60006020820190508181036000830152613a39816139fd565b9050919050565b7f4434000000000000000000000000000000000000000000000000000000000000600082015250565b6000613a766002836131c0565b9150613a8182613a40565b602082019050919050565b60006020820190508181036000830152613aa581613a69565b9050919050565b7f4f7074696f6e20646f6573206e6f74206578697374732e000000000000000000600082015250565b6000613ae26017836131c0565b9150613aed82613aac565b602082019050919050565b60006020820190508181036000830152613b1181613ad5565b9050919050565b7f4431340000000000000000000000000000000000000000000000000000000000600082015250565b6000613b4e6003836131c0565b9150613b5982613b18565b602082019050919050565b60006020820190508181036000830152613b7d81613b41565b9050919050565b6000613b8f82612c52565b9150613b9a83612c52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613bcf57613bce613899565b5b82820190509291505056fea264697066735822122035fd98ad59830ffcf7fc6b00df9cc3224594122fc3c3162c9e4139d58b5ad04f64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806357620cdf116100a2578063b91916a611610071578063b91916a6146102fd578063f3fef3a314610319578063f52f252614610335578063f81cba0514610351578063fba225b91461036d57610116565b806357620cdf1461028b57806360514205146102a75780637535d246146102c35780637f8368da146102e157610116565b80631b11d0ff116100e95780631b11d0ff146101bc5780631f01664a146101ec578063233ac0081461020857806329a2755c14610238578063409e22051461025457610116565b806301ffc9a71461011b5780630542975c1461014b578063065170f41461016957806319067b64146101a0575b600080fd5b61013560048036038101906101309190612b55565b610389565b6040516101429190612b9d565b60405180910390f35b610153610429565b6040516101609190612c37565b60405180910390f35b610183600480360381019061017e9190612c88565b61044f565b604051610197989796959493929190612ce5565b60405180910390f35b6101ba60048036038101906101b59190612e2e565b610511565b005b6101d660048036038101906101d19190612ec8565b610878565b6040516101e39190612b9d565b60405180910390f35b61020660048036038101906102019190612c88565b610888565b005b610222600480360381019061021d9190612f62565b610c0f565b60405161022f9190612fa2565b60405180910390f35b610252600480360381019061024d9190612c88565b610c34565b005b61026e60048036038101906102699190612c88565b610c41565b604051610282989796959493929190612fbd565b60405180910390f35b6102a560048036038101906102a09190612c88565b610d29565b005b6102c160048036038101906102bc9190612c88565b610e03565b005b6102cb611092565b6040516102d8919061305c565b60405180910390f35b6102fb60048036038101906102f69190613077565b6110b8565b005b6103176004803603810190610312919061312d565b611453565b005b610333600480360381019061032e9190613180565b611771565b005b61034f600480360381019061034a9190612c88565b611981565b005b61036b60048036038101906103669190612c88565b611b02565b005b61038760048036038101906103829190612c88565b611dc3565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104225750631b11d0ff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16905088565b33866001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae9061321d565b60405180910390fd5b876000801561061d5742600260008481526020019081526020016000206004015410610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90613289565b60405180910390fd5b610677565b4260026000848152602001908152602001600020600401541015610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066d906132f5565b60405180910390fd5b5b88600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610749919061332a565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342b0b77c30600160008e815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008f8152602001908152602001600020600501548a8a8d6040518763ffffffff1660e01b815260040161083a969594939291906133c4565b600060405180830381600087803b15801561085457600080fd5b505af1158015610868573d6000803e3d6000fd5b5050505050505050505050505050565b6000600190509695505050505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461092e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109259061346c565b60405180910390fd5b826001806109e057600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d2906134d8565b60405180910390fd5b610a87565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d90613544565b60405180910390fd5b5b6000600160008781526020019081526020016000206007015411610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad7906135b0565b60405180910390fd5b600060016000878152602001908152602001600020600701549050600060016000888152602001908152602001600020600701819055506001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b889291906135d0565b6020604051808303816000875af1158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190613625565b507f364c50cfd85ef2e44ae41c769b375ca3e4cd21a63f2f593171bdda820f70d1f7338783604051610bff93929190613652565b60405180910390a1505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610c3e3382611e9d565b50565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154908060070154905088565b610d333382612015565b6001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610dbc93929190613689565b6020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff9190613625565b5050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea09061346c565b60405180910390fd5b6002600084815260200190815260200160002060060160019054906101000a900460ff16610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f039061370c565b60405180910390fd5b6000600160008581526020019081526020016000206006015411610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c906135b0565b60405180910390fd5b600060016000858152602001908152602001600020600601549050600060016000868152602001908152602001600020600601819055506001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161100d9291906135d0565b6020604051808303816000875af115801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190613625565b507fd4072f896a83f1975997e4b3c8cc6e44538eafada8b6537b11e77ff1ead2455f33858360405161108493929190613652565b60405180910390a150505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112090613778565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561119a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119190613778565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561120b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120290613778565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161124893929190613689565b6020604051808303816000875af1158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190613625565b5061129660006123eb565b60006112a26000612401565b90508b6001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001600083815260200190815260200160002090508b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898160050181905550878160070181905550888160060181905550338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550813373ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e39159600160405161143c9190612b9d565b60405180910390a350505050505050505050505050565b33836001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f09061321d565b60405180910390fd5b846000801561155f574260026000848152602001908152602001600020600401541061155a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155190613289565b60405180910390fd5b6115b9565b42600260008481526020019081526020016000206004015410156115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af906132f5565b60405180910390fd5b5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561162a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162190613778565b60405180910390fd5b6002600089815260200190815260200160002060060160019054906101000a900460ff161561168e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611685906137e4565b60405180910390fd5b6001600260008a815260200190815260200160002060060160006101000a81548160ff02191690831515021790555086600260008a815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008a8152602001908152602001600020600501819055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c88600160405161175f929190613804565b60405180910390a15050505050505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182790613879565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118bc91906138c8565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016118fe9291906135d0565b6020604051808303816000875af115801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190613625565b507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb82338360405161197593929190613689565b60405180910390a15050565b33816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1e9061321d565b60405180910390fd5b611a308361240f565b6001600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000888152602001908152602001600020600601546040518463ffffffff1660e01b8152600401611ab993929190613689565b6020604051808303816000875af1158015611ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afc9190613625565b50505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9f9061346c565b60405180910390fd5b82600080600260008481526020019081526020016000206003015411611c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfa90613948565b60405180910390fd5b8015611c67574260026000848152602001908152602001600020600301541015611c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c59906139b4565b60405180910390fd5b611cc0565b42600260008481526020019081526020016000206003015410611cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb690613a20565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611d735750426002600087815260200190815260200160002060040154108015611d7257506002600086815260200190815260200160002060060160019054906101000a900460ff16155b5b611db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da990613a8c565b60405180910390fd5b611dbc33866125f1565b5050505050565b611dcd338261271d565b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060026000868152602001908152602001600020600501546040518463ffffffff1660e01b8152600401611e5693929190613689565b6020604051808303816000875af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e999190613625565b5050565b81816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a9061321d565b60405180910390fd5b6002600084815260200190815260200160002060060160009054906101000a900460ff16611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d906137e4565b60405180910390fd5b60006002600085815260200190815260200160002060060160006101000a81548160ff0219169083151502179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c836000604051612007929190613804565b60405180910390a150505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b390613af8565b60405180910390fd5b8160008061216e57600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612169576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612160906134d8565b60405180910390fd5b612215565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220b90613544565b60405180910390fd5b5b8360016000600260008481526020019081526020016000206003015411612271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226890613948565b60405180910390fd5b80156122d55742600260008481526020019081526020016000206003015410156122d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c7906139b4565b60405180910390fd5b61232e565b4260026000848152602001908152602001600020600301541061232d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232490613a20565b60405180910390fd5b5b866001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002600088815260200190815260200160002060030181905550858773ffffffffffffffffffffffffffffffffffffffff167feb353a6084f42c4569f7fe0e62ec9a9a107f0453a8f76735dd47ef68dcfcce3f60405160405180910390a350505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b80600080156124755742600260008481526020019081526020016000206004015410612470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246790613289565b60405180910390fd5b6124cf565b42600260008481526020019081526020016000206004015410156124ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c5906132f5565b60405180910390fd5b5b60006001600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506002600085815260200190815260200160002060060160019054906101000a900460ff161561256e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612565906137e4565b60405180910390fd5b60016002600086815260200190815260200160002060060160016101000a81548160ff0219169083151502179055506125a781856125f1565b838173ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a350505050565b600060016000838152602001908152602001600020600501549050600060016000848152602001908152602001600020600501819055506001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016126999291906135d0565b6020604051808303816000875af11580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc9190613625565b507f6349409af923ab04f6ba4cd71740fcf0de9efb3a66822fd753b51741914227cc83838360405161271093929190613652565b60405180910390a1505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bb90613af8565b60405180910390fd5b816000801561282a5742600260008481526020019081526020016000206004015410612825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281c90613289565b60405180910390fd5b612884565b4260026000848152602001908152602001600020600401541015612883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287a906132f5565b60405180910390fd5b5b6002600085815260200190815260200160002060060160009054906101000a900460ff166128e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128de90613b64565b60405180910390fd5b6002600085815260200190815260200160002060050154600360006002600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129f59190613b84565b92505081905550838573ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4846001600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612aec8585611e9d565b5050505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612b3281612afd565b8114612b3d57600080fd5b50565b600081359050612b4f81612b29565b92915050565b600060208284031215612b6b57612b6a612af3565b5b6000612b7984828501612b40565b91505092915050565b60008115159050919050565b612b9781612b82565b82525050565b6000602082019050612bb26000830184612b8e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612bfd612bf8612bf384612bb8565b612bd8565b612bb8565b9050919050565b6000612c0f82612be2565b9050919050565b6000612c2182612c04565b9050919050565b612c3181612c16565b82525050565b6000602082019050612c4c6000830184612c28565b92915050565b6000819050919050565b612c6581612c52565b8114612c7057600080fd5b50565b600081359050612c8281612c5c565b92915050565b600060208284031215612c9e57612c9d612af3565b5b6000612cac84828501612c73565b91505092915050565b6000612cc082612bb8565b9050919050565b612cd081612cb5565b82525050565b612cdf81612c52565b82525050565b600061010082019050612cfb600083018b612cc7565b612d08602083018a612cc7565b612d156040830189612cc7565b612d226060830188612cd6565b612d2f6080830187612cd6565b612d3c60a0830186612cd6565b612d4960c0830185612b8e565b612d5660e0830184612b8e565b9998505050505050505050565b612d6c81612cb5565b8114612d7757600080fd5b50565b600081359050612d8981612d63565b92915050565b600061ffff82169050919050565b612da681612d8f565b8114612db157600080fd5b50565b600081359050612dc381612d9d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612dee57612ded612dc9565b5b8235905067ffffffffffffffff811115612e0b57612e0a612dce565b5b602083019150836001820283011115612e2757612e26612dd3565b5b9250929050565b60008060008060008060a08789031215612e4b57612e4a612af3565b5b6000612e5989828a01612c73565b9650506020612e6a89828a01612d7a565b9550506040612e7b89828a01612c73565b9450506060612e8c89828a01612db4565b935050608087013567ffffffffffffffff811115612ead57612eac612af8565b5b612eb989828a01612dd8565b92509250509295509295509295565b60008060008060008060a08789031215612ee557612ee4612af3565b5b6000612ef389828a01612d7a565b9650506020612f0489828a01612c73565b9550506040612f1589828a01612c73565b9450506060612f2689828a01612d7a565b935050608087013567ffffffffffffffff811115612f4757612f46612af8565b5b612f5389828a01612dd8565b92509250509295509295509295565b60008060408385031215612f7957612f78612af3565b5b6000612f8785828601612d7a565b9250506020612f9885828601612d7a565b9150509250929050565b6000602082019050612fb76000830184612cd6565b92915050565b600061010082019050612fd3600083018b612cc7565b612fe0602083018a612cc7565b612fed6040830189612cc7565b612ffa6060830188612cc7565b6130076080830187612cc7565b61301460a0830186612cd6565b61302160c0830185612cd6565b61302e60e0830184612cd6565b9998505050505050505050565b600061304682612c04565b9050919050565b6130568161303b565b82525050565b6000602082019050613071600083018461304d565b92915050565b600080600080600080600080610100898b03121561309857613097612af3565b5b60006130a68b828c01612d7a565b98505060206130b78b828c01612d7a565b97505060406130c88b828c01612d7a565b96505060606130d98b828c01612c73565b95505060806130ea8b828c01612c73565b94505060a06130fb8b828c01612c73565b93505060c061310c8b828c01612c73565b92505060e061311d8b828c01612c73565b9150509295985092959890939650565b60008060006060848603121561314657613145612af3565b5b600061315486828701612c73565b935050602061316586828701612d7a565b925050604061317686828701612c73565b9150509250925092565b6000806040838503121561319757613196612af3565b5b60006131a585828601612d7a565b92505060206131b685828601612c73565b9150509250929050565b600082825260208201905092915050565b7f4433000000000000000000000000000000000000000000000000000000000000600082015250565b60006132076002836131c0565b9150613212826131d1565b602082019050919050565b60006020820190508181036000830152613236816131fa565b9050919050565b7f4438000000000000000000000000000000000000000000000000000000000000600082015250565b60006132736002836131c0565b915061327e8261323d565b602082019050919050565b600060208201905081810360008301526132a281613266565b9050919050565b7f4439000000000000000000000000000000000000000000000000000000000000600082015250565b60006132df6002836131c0565b91506132ea826132a9565b602082019050919050565b6000602082019050818103600083015261330e816132d2565b9050919050565b60008151905061332481612d63565b92915050565b6000602082840312156133405761333f612af3565b5b600061334e84828501613315565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006133948385613357565b93506133a1838584613368565b6133aa83613377565b840190509392505050565b6133be81612d8f565b82525050565b600060a0820190506133d96000830189612cc7565b6133e66020830188612cc7565b6133f36040830187612cd6565b8181036060830152613406818587613388565b905061341560808301846133b5565b979650505050505050565b7f4432000000000000000000000000000000000000000000000000000000000000600082015250565b60006134566002836131c0565b915061346182613420565b602082019050919050565b6000602082019050818103600083015261348581613449565b9050919050565b7f4431330000000000000000000000000000000000000000000000000000000000600082015250565b60006134c26003836131c0565b91506134cd8261348c565b602082019050919050565b600060208201905081810360008301526134f1816134b5565b9050919050565b7f4431320000000000000000000000000000000000000000000000000000000000600082015250565b600061352e6003836131c0565b9150613539826134f8565b602082019050919050565b6000602082019050818103600083015261355d81613521565b9050919050565b7f4431310000000000000000000000000000000000000000000000000000000000600082015250565b600061359a6003836131c0565b91506135a582613564565b602082019050919050565b600060208201905081810360008301526135c98161358d565b9050919050565b60006040820190506135e56000830185612cc7565b6135f26020830184612cd6565b9392505050565b61360281612b82565b811461360d57600080fd5b50565b60008151905061361f816135f9565b92915050565b60006020828403121561363b5761363a612af3565b5b600061364984828501613610565b91505092915050565b60006060820190506136676000830186612cc7565b6136746020830185612cd6565b6136816040830184612cd6565b949350505050565b600060608201905061369e6000830186612cc7565b6136ab6020830185612cc7565b6136b86040830184612cd6565b949350505050565b7f4431300000000000000000000000000000000000000000000000000000000000600082015250565b60006136f66003836131c0565b9150613701826136c0565b602082019050919050565b60006020820190508181036000830152613725816136e9565b9050919050565b7f5472616e73616374696f6e20746f206164647265737328302921000000000000600082015250565b6000613762601a836131c0565b915061376d8261372c565b602082019050919050565b6000602082019050818103600083015261379181613755565b9050919050565b7f4437000000000000000000000000000000000000000000000000000000000000600082015250565b60006137ce6002836131c0565b91506137d982613798565b602082019050919050565b600060208201905081810360008301526137fd816137c1565b9050919050565b60006040820190506138196000830185612cd6565b6138266020830184612b8e565b9392505050565b7f4431350000000000000000000000000000000000000000000000000000000000600082015250565b60006138636003836131c0565b915061386e8261382d565b602082019050919050565b6000602082019050818103600083015261389281613856565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138d382612c52565b91506138de83612c52565b9250828210156138f1576138f0613899565b5b828203905092915050565b7f4f7074696f6e20706172616d6174657273206e6f742073657474656420796574600082015250565b60006139326020836131c0565b915061393d826138fc565b602082019050919050565b6000602082019050818103600083015261396181613925565b9050919050565b7f4f66666572206578706972656400000000000000000000000000000000000000600082015250565b600061399e600d836131c0565b91506139a982613968565b602082019050919050565b600060208201905081810360008301526139cd81613991565b9050919050565b7f4f66666572206e6f742065787069726564207965742100000000000000000000600082015250565b6000613a0a6016836131c0565b9150613a15826139d4565b602082019050919050565b60006020820190508181036000830152613a39816139fd565b9050919050565b7f4434000000000000000000000000000000000000000000000000000000000000600082015250565b6000613a766002836131c0565b9150613a8182613a40565b602082019050919050565b60006020820190508181036000830152613aa581613a69565b9050919050565b7f4f7074696f6e20646f6573206e6f74206578697374732e000000000000000000600082015250565b6000613ae26017836131c0565b9150613aed82613aac565b602082019050919050565b60006020820190508181036000830152613b1181613ad5565b9050919050565b7f4431340000000000000000000000000000000000000000000000000000000000600082015250565b6000613b4e6003836131c0565b9150613b5982613b18565b602082019050919050565b60006020820190508181036000830152613b7d81613b41565b9050919050565b6000613b8f82612c52565b9150613b9a83612c52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613bcf57613bce613899565b5b82820190509291505056fea264697066735822122035fd98ad59830ffcf7fc6b00df9cc3224594122fc3c3162c9e4139d58b5ad04f64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyOption(uint256)": {
        "details": "change participator address to msg.sender and delist the option from secondary market",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "delistOption(uint256)": {
        "details": "sets listed field of option to false in option mapping, only callable by the participator",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "executeOperation(address,uint256,uint256,address,bytes)": {
        "details": "Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount",
        "params": {
          "amount": "The amount of the flash-borrowed asset",
          "asset": "The address of the flash-borrowed asset",
          "initiator": "The address of the flashloan initiator",
          "params": "The byte-encoded params passed when initiating the flashloan",
          "premium": "The fee of the flash-borrowed asset"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds, false otherwise"
        }
      },
      "exerciseOption(uint256)": {
        "details": "transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "listOption(uint256,address,uint256)": {
        "details": "sets listed field of option to true, asset address and amount in option mapping",
        "params": {
          "optionId": "ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset"
        }
      },
      "offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent",
        "params": {
          "colleteral": "Address of colleteral asset, counterAsset Address of counter asset, ",
          "premiumAsset": "Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised"
        }
      },
      "participateOption(uint256)": {
        "details": "transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "refundColleteral(uint256)": {
        "details": "refund the colleteral only if option is not participated or option expires worthless",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "withdraw(address,uint256)": {
        "details": "transfer the token that option seller should receive",
        "params": {
          "amount": "Amount of thw token received",
          "asset": "Address of the token to receive"
        }
      },
      "withdrawCA(uint256)": {
        "details": "transfer the counter asset to initiator only if option is exercised",
        "params": {
          "optionId": "ID of the option, receiver Address of buyer of the option  contract"
        }
      },
      "withdrawPremium(uint256)": {
        "details": "transfers the premium asset if there is a participant in option contract only callable by the option initiator",
        "params": {
          "optionId": "ID of the option"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyOption(uint256)": {
        "notice": "buy the option from secondary market"
      },
      "delistOption(uint256)": {
        "notice": "delists the option from secondary market"
      },
      "executeOperation(address,uint256,uint256,address,bytes)": {
        "notice": "Executes an operation after receiving the flash-borrowed asset"
      },
      "exerciseOption(uint256)": {
        "notice": "exercies the option"
      },
      "listOption(uint256,address,uint256)": {
        "notice": "list the option in secondary market"
      },
      "offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "publish an offer for the option contract"
      },
      "participateOption(uint256)": {
        "notice": "participate in option contract by paying the option premium"
      },
      "refundColleteral(uint256)": {
        "notice": "withdraw colleteral only if no ones participates in offer period or option expires worthless"
      },
      "withdraw(address,uint256)": {
        "notice": "withdraw the amount that seller of the option should receive"
      },
      "withdrawCA(uint256)": {
        "notice": "transfers the counter asset to caller"
      },
      "withdrawPremium(uint256)": {
        "notice": "withdraw the option premium "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8036,
        "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
        "label": "counter",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)4730_storage"
      },
      {
        "astId": 8041,
        "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
        "label": "options",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Option)5351_storage)"
      },
      {
        "astId": 8046,
        "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
        "label": "optionDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(OptionDetails)5368_storage)"
      },
      {
        "astId": 8052,
        "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
        "label": "withdrawAllowance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7656,
        "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
        "label": "ADDRESSES_PROVIDER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPoolAddressesProvider)873"
      },
      {
        "astId": 7660,
        "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
        "label": "POOL",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPool)664"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)664": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)873": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Option)5351_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOpWizSimple.Option)",
        "numberOfBytes": "32",
        "value": "t_struct(Option)5351_storage"
      },
      "t_mapping(t_uint256,t_struct(OptionDetails)5368_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOpWizSimple.OptionDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionDetails)5368_storage"
      },
      "t_struct(Counter)4730_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4729,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Option)5351_storage": {
        "encoding": "inplace",
        "label": "struct IOpWizSimple.Option",
        "members": [
          {
            "astId": 5336,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "initiator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5338,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "participant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5340,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "colleteral",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5342,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "counterAsset",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5344,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "premiumAsset",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5346,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "amountOfColleteral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5348,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "amountOfCA",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5350,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "premiumAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(OptionDetails)5368_storage": {
        "encoding": "inplace",
        "label": "struct IOpWizSimple.OptionDetails",
        "members": [
          {
            "astId": 5353,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "listAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5355,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "priceFeedAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5357,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "poolAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5359,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "offerEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5361,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "optionExpiry",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5363,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "listAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5365,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "isListed",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 5367,
            "contract": "contracts/OpWiz/OpWizFlashExercise.sol:OpWizFlashExercise",
            "label": "exercised",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}